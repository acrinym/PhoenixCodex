MIME-Version: 1.0
Content-Type: multipart/related; boundary="boundary-gjssvzyld"
Subject: Phoenix Codex - index.html

This is a multi-part message in MIME format.

--boundary-gjssvzyld
Content-Type: text/html; charset=UTF-8
Content-Location: index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Phoenix Codex - Interactive Visualization</title>
    <link rel="stylesheet" href="styles/main.css">
    <link rel="stylesheet" href="styles/components.css">
    <link rel="stylesheet" href="styles/visualization.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <div id="app">
        <!-- Header -->
        <header class="header">
            <div class="header-content">
                <div class="logo">
                    <i class="fas fa-fire"></i>
                    <h1>Phoenix Codex</h1>
                </div>
                <nav class="nav">
                    <button class="nav-btn active" data-tab="dashboard">
                        <i class="fas fa-chart-line"></i>
                        Dashboard
                    </button>
                    <button class="nav-btn" data-tab="visualization">
                        <i class="fas fa-cube"></i>
                        3D View
                    </button>
                    <button class="nav-btn" data-tab="timeline">
                        <i class="fas fa-clock"></i>
                        Timeline
                    </button>
                    <button class="nav-btn" data-tab="search">
                        <i class="fas fa-search"></i>
                        Search
                    </button>
                    <button class="nav-btn" data-tab="settings">
                        <i class="fas fa-cog"></i>
                        Settings
                    </button>
                </nav>
            </div>
        </header>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Dashboard Tab -->
            <div id="dashboard" class="tab-content active">
                <div class="dashboard-grid">
                    <div class="card stats-card">
                        <h3>Data Overview</h3>
                        <div class="stats-grid">
                            <div class="stat-item">
                                <div class="stat-value" id="total-entries">0</div>
                                <div class="stat-label">Total Entries</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value" id="unique-sources">0</div>
                                <div class="stat-label">Unique Sources</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value" id="date-range">-</div>
                                <div class="stat-label">Date Range</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value" id="avg-content-length">0</div>
                                <div class="stat-label">Avg Content Length</div>
                            </div>
                        </div>
                    </div>

                    <div class="card chart-card">
                        <h3>Content Types Distribution</h3>
                        <canvas id="content-types-chart"></canvas>
                    </div>

                    <div class="card chart-card">
                        <h3>Timeline Activity</h3>
                        <canvas id="timeline-chart"></canvas>
                    </div>

                    <div class="card chart-card">
                        <h3>Top Tags</h3>
                        <div id="tags-cloud"></div>
                    </div>
                </div>
            </div>

            <!-- 3D Visualization Tab -->
            <div id="visualization" class="tab-content">
                <div class="visualization-container">
                    <div class="controls-panel">
                        <div class="control-group">
                            <label>Visualization Type:</label>
                            <select id="viz-type">
                                <option value="network">Network Graph</option>
                                <option value="timeline-3d">3D Timeline</option>
                                <option value="content-clusters">Content Clusters</option>
                                <option value="relationship-map">Relationship Map</option>
                            </select>
                        </div>
                        <div class="control-group">
                            <label>Color Scheme:</label>
                            <select id="color-scheme">
                                <option value="phoenix">Phoenix Fire</option>
                                <option value="ocean">Ocean Blue</option>
                                <option value="forest">Forest Green</option>
                                <option value="sunset">Sunset Orange</option>
                            </select>
                        </div>
                        <div class="control-group">
                            <label>Animation Speed:</label>
                            <input type="range" id="animation-speed" min="0.1" max="2.0" step="0.1" value="1.0">
                        </div>
                        <button id="reset-camera" class="btn btn-secondary">
                            <i class="fas fa-camera"></i>
                            Reset Camera
                        </button>
                    </div>
                    <div id="three-container"></div>
                </div>
            </div>

            <!-- Timeline Tab -->
            <div id="timeline" class="tab-content">
                <div class="timeline-container">
                    <div class="timeline-controls">
                        <div class="date-range-picker">
                            <input type="date" id="start-date">
                            <span>to</span>
                            <input type="date" id="end-date">
                            <button id="apply-date-range" class="btn btn-primary">Apply</button>
                        </div>
                        <div class="timeline-filters">
                            <label>Filter by Type:</label>
                            <select id="timeline-type-filter">
                                <option value="all">All Types</option>
                                <option value="conversation">Conversations</option>
                                <option value="thought">Thoughts</option>
                                <option value="memory">Memories</option>
                                <option value="event">Events</option>
                            </select>
                        </div>
                    </div>
                    <div id="timeline-visualization"></div>
                </div>
            </div>

            <!-- Search Tab -->
            <div id="search" class="tab-content">
                <div class="search-container">
                    <div class="search-panel">
                        <div class="search-input-group">
                            <input type="text" id="search-query" placeholder="Enter your search query...">
                            <button id="search-btn" class="btn btn-primary">
                                <i class="fas fa-search"></i>
                                Search
                            </button>
                        </div>
                        <div class="search-options">
                            <label>
                                <input type="checkbox" id="semantic-search"> Semantic Search
                            </label>
                            <label>
                                <input type="checkbox" id="case-sensitive"> Case Sensitive
                            </label>
                            <label>
                                <input type="checkbox" id="include-tags"> Include Tags
                            </label>
                        </div>
                    </div>
                    <div class="search-results">
                        <div id="results-container"></div>
                        <div id="results-pagination"></div>
                    </div>
                </div>
            </div>

            <!-- Settings Tab -->
            <div id="settings" class="tab-content">
                <div class="settings-container">
                    <div class="settings-section">
                        <h3>Data Management</h3>
                        <div class="setting-group">
                            <label>Load Data File:</label>
                            <input type="file" id="data-file-input" accept=".json,.csv">
                            <button id="load-sample-data" class="btn btn-secondary">Load Sample Data</button>
                        </div>
                        <div class="setting-group">
                            <label>Export Data:</label>
                            <button id="export-json" class="btn btn-secondary">Export as JSON</button>
                            <button id="export-csv" class="btn btn-secondary">Export as CSV</button>
                        </div>
                    </div>

                    <div class="settings-section">
                        <h3>Visualization Settings</h3>
                        <div class="setting-group">
                            <label>Theme:</label>
                            <select id="theme-selector">
                                <option value="phoenix">Phoenix Fire</option>
                                <option value="ocean">Ocean Blue</option>
                                <option value="forest">Forest Green</option>
                                <option value="sunset">Sunset Orange</option>
                            </select>
                        </div>
                        <div class="setting-group">
                            <label>Animation:</label>
                            <input type="checkbox" id="enable-animations" checked>
                            <span>Enable Animations</span>
                        </div>
                        <div class="setting-group">
                            <label>Performance:</label>
                            <select id="performance-mode">
                                <option value="balanced">Balanced</option>
                                <option value="quality">High Quality</option>
                                <option value="performance">High Performance</option>
                            </select>
                        </div>
                    </div>

                    <div class="settings-section">
                        <h3>Application Info</h3>
                        <div class="info-group">
                            <div class="info-item">
                                <span class="info-label">Version:</span>
                                <span class="info-value">1.0.0</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Data Entries:</span>
                                <span class="info-value" id="settings-data-count">0</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Last Updated:</span>
                                <span class="info-value" id="last-updated">-</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <!-- Loading Overlay -->
        <div id="loading-overlay" class="loading-overlay">
            <div class="loading-spinner">
                <i class="fas fa-fire fa-spin"></i>
                <p>Loading Phoenix Codex...</p>
            </div>
        </div>

        <!-- Notification System -->
        <div id="notification-container" class="notification-container"></div>
    </div>

    <!-- Scripts -->
    <script type="module" src="js/main.js"></script>
    <script type="module" src="js/visualization.js"></script>
    <script type="module" src="js/timeline.js"></script>
    <script type="module" src="js/search.js"></script>
    <script type="module" src="js/settings.js"></script>
    <script type="module" src="js/utils.js"></script>
</body>
</html> 
--boundary-gjssvzyld
Content-Type: text/css
Content-Transfer-Encoding: base64
Content-Location: styles/main.css


--boundary-gjssvzyld
Content-Type: text/css
Content-Transfer-Encoding: base64
Content-Location: styles/components.css


--boundary-gjssvzyld
Content-Type: text/css
Content-Transfer-Encoding: base64
Content-Location: styles/visualization.css


--boundary-gjssvzyld
Content-Type: application/javascript
Content-Transfer-Encoding: base64
Content-Location: js/main.js


--boundary-gjssvzyld
Content-Type: application/javascript
Content-Transfer-Encoding: base64
Content-Location: js/visualization.js

Ly8gUGhvZW5peCBDb2RleCAtIFRocmVlLmpzIFZpc3VhbGl6YXRpb24gTW9kdWxlCmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ2h0dHBzOi8vY2RuLnNreXBhY2suZGV2L3RocmVlQDAuMTYyLjAnOwppbXBvcnQgeyBEYXRhTWFuYWdlciB9IGZyb20gJy4vdXRpbHMuanMnOwoKY2xhc3MgVmlzdWFsaXphdGlvbk1hbmFnZXIgewogICAgY29uc3RydWN0b3IoKSB7CiAgICAgICAgdGhpcy5zY2VuZSA9IG51bGw7CiAgICAgICAgdGhpcy5jYW1lcmEgPSBudWxsOwogICAgICAgIHRoaXMucmVuZGVyZXIgPSBudWxsOwogICAgICAgIHRoaXMuY29udHJvbHMgPSBudWxsOwogICAgICAgIHRoaXMuYW5pbWF0aW9uSWQgPSBudWxsOwogICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IGZhbHNlOwogICAgICAgIHRoaXMuY3VycmVudFZpc3VhbGl6YXRpb24gPSBudWxsOwogICAgICAgIHRoaXMucGVyZm9ybWFuY2VNb2RlID0gJ2JhbGFuY2VkJzsKICAgICAgICB0aGlzLmFuaW1hdGlvbnNFbmFibGVkID0gdHJ1ZTsKICAgICAgICB0aGlzLmFuaW1hdGlvblNwZWVkID0gMS4wOwogICAgICAgIHRoaXMuY29sb3JTY2hlbWUgPSAncGhvZW5peCc7CiAgICAgICAgCiAgICAgICAgdGhpcy5kYXRhTWFuYWdlciA9IG5ldyBEYXRhTWFuYWdlcigpOwogICAgICAgIHRoaXMuY29sb3JTY2hlbWVzID0gewogICAgICAgICAgICBwaG9lbml4OiB7CiAgICAgICAgICAgICAgICBwcmltYXJ5OiAweGZmNmIzNSwKICAgICAgICAgICAgICAgIHNlY29uZGFyeTogMHhmNzkzMWUsCiAgICAgICAgICAgICAgICBhY2NlbnQ6IDB4ZmZkMjNmLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogMHgyYzE4MTAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb2NlYW46IHsKICAgICAgICAgICAgICAgIHByaW1hcnk6IDB4MDA2NmNjLAogICAgICAgICAgICAgICAgc2Vjb25kYXJ5OiAweDAwOTlmZiwKICAgICAgICAgICAgICAgIGFjY2VudDogMHgwMGNjZmYsCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAweDAwMzM2NgogICAgICAgICAgICB9LAogICAgICAgICAgICBmb3Jlc3Q6IHsKICAgICAgICAgICAgICAgIHByaW1hcnk6IDB4MmQ1YTI3LAogICAgICAgICAgICAgICAgc2Vjb25kYXJ5OiAweDRhN2M1OSwKICAgICAgICAgICAgICAgIGFjY2VudDogMHg2YjhlMjMsCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAweDFhM2QxYQogICAgICAgICAgICB9LAogICAgICAgICAgICBzdW5zZXQ6IHsKICAgICAgICAgICAgICAgIHByaW1hcnk6IDB4ZmY4YzQyLAogICAgICAgICAgICAgICAgc2Vjb25kYXJ5OiAweGZmNmI2YiwKICAgICAgICAgICAgICAgIGFjY2VudDogMHhmZmQ5M2QsCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAweDhiNDUxMwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH0KICAgIAogICAgaW5pdCgpIHsKICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKSByZXR1cm47CiAgICAgICAgCiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RocmVlLWNvbnRhaW5lcicpOwogICAgICAgIGlmICghY29udGFpbmVyKSByZXR1cm47CiAgICAgICAgCiAgICAgICAgdGhpcy5zZXR1cFNjZW5lKGNvbnRhaW5lcik7CiAgICAgICAgdGhpcy5zZXR1cENhbWVyYSgpOwogICAgICAgIHRoaXMuc2V0dXBSZW5kZXJlcihjb250YWluZXIpOwogICAgICAgIHRoaXMuc2V0dXBDb250cm9scygpOwogICAgICAgIHRoaXMuc2V0dXBMaWdodHMoKTsKICAgICAgICB0aGlzLnNldHVwRXZlbnRMaXN0ZW5lcnMoKTsKICAgICAgICAKICAgICAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSB0cnVlOwogICAgICAgIHRoaXMuYW5pbWF0ZSgpOwogICAgICAgIAogICAgICAgIC8vIExvYWQgaW5pdGlhbCB2aXN1YWxpemF0aW9uCiAgICAgICAgdGhpcy5sb2FkVmlzdWFsaXphdGlvbignbmV0d29yaycpOwogICAgfQogICAgCiAgICBzZXR1cFNjZW5lKGNvbnRhaW5lcikgewogICAgICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTsKICAgICAgICB0aGlzLnNjZW5lLmJhY2tncm91bmQgPSBuZXcgVEhSRUUuQ29sb3IodGhpcy5jb2xvclNjaGVtZXNbdGhpcy5jb2xvclNjaGVtZV0uYmFja2dyb3VuZCk7CiAgICAgICAgCiAgICAgICAgLy8gQWRkIGZvZyBmb3IgZGVwdGgKICAgICAgICB0aGlzLnNjZW5lLmZvZyA9IG5ldyBUSFJFRS5Gb2codGhpcy5jb2xvclNjaGVtZXNbdGhpcy5jb2xvclNjaGVtZV0uYmFja2dyb3VuZCwgNTAsIDIwMCk7CiAgICB9CiAgICAKICAgIHNldHVwQ2FtZXJhKCkgewogICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aHJlZS1jb250YWluZXInKTsKICAgICAgICBjb25zdCBhc3BlY3QgPSBjb250YWluZXIuY2xpZW50V2lkdGggLyBjb250YWluZXIuY2xpZW50SGVpZ2h0OwogICAgICAgIAogICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDc1LCBhc3BlY3QsIDAuMSwgMTAwMCk7CiAgICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDUwKTsKICAgIH0KICAgIAogICAgc2V0dXBSZW5kZXJlcihjb250YWluZXIpIHsKICAgICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoeyAKICAgICAgICAgICAgYW50aWFsaWFzOiB0cnVlLAogICAgICAgICAgICBhbHBoYTogdHJ1ZSAKICAgICAgICB9KTsKICAgICAgICAKICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUoY29udGFpbmVyLmNsaWVudFdpZHRoLCBjb250YWluZXIuY2xpZW50SGVpZ2h0KTsKICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFBpeGVsUmF0aW8oTWF0aC5taW4od2luZG93LmRldmljZVBpeGVsUmF0aW8sIDIpKTsKICAgICAgICB0aGlzLnJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gdHJ1ZTsKICAgICAgICB0aGlzLnJlbmRlcmVyLnNoYWRvd01hcC50eXBlID0gVEhSRUUuUENGU29mdFNoYWRvd01hcDsKICAgICAgICAKICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5yZW5kZXJlci5kb21FbGVtZW50KTsKICAgIH0KICAgIAogICAgc2V0dXBDb250cm9scygpIHsKICAgICAgICAvLyBTaW1wbGUgb3JiaXQgY29udHJvbHMKICAgICAgICB0aGlzLmNvbnRyb2xzID0gewogICAgICAgICAgICByb3RhdGlvbjogeyB4OiAwLCB5OiAwIH0sCiAgICAgICAgICAgIHpvb206IDUwLAogICAgICAgICAgICBpc01vdXNlRG93bjogZmFsc2UsCiAgICAgICAgICAgIGxhc3RNb3VzZVBvc2l0aW9uOiB7IHg6IDAsIHk6IDAgfQogICAgICAgIH07CiAgICB9CiAgICAKICAgIHNldHVwTGlnaHRzKCkgewogICAgICAgIC8vIEFtYmllbnQgbGlnaHQKICAgICAgICBjb25zdCBhbWJpZW50TGlnaHQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KDB4NDA0MDQwLCAwLjQpOwogICAgICAgIHRoaXMuc2NlbmUuYWRkKGFtYmllbnRMaWdodCk7CiAgICAgICAgCiAgICAgICAgLy8gRGlyZWN0aW9uYWwgbGlnaHQKICAgICAgICBjb25zdCBkaXJlY3Rpb25hbExpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhmZmZmZmYsIDAuOCk7CiAgICAgICAgZGlyZWN0aW9uYWxMaWdodC5wb3NpdGlvbi5zZXQoMTAsIDEwLCA1KTsKICAgICAgICBkaXJlY3Rpb25hbExpZ2h0LmNhc3RTaGFkb3cgPSB0cnVlOwogICAgICAgIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93Lm1hcFNpemUud2lkdGggPSAyMDQ4OwogICAgICAgIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93Lm1hcFNpemUuaGVpZ2h0ID0gMjA0ODsKICAgICAgICB0aGlzLnNjZW5lLmFkZChkaXJlY3Rpb25hbExpZ2h0KTsKICAgICAgICAKICAgICAgICAvLyBQb2ludCBsaWdodCBmb3IgYWNjZW50CiAgICAgICAgY29uc3QgcG9pbnRMaWdodCA9IG5ldyBUSFJFRS5Qb2ludExpZ2h0KHRoaXMuY29sb3JTY2hlbWVzW3RoaXMuY29sb3JTY2hlbWVdLmFjY2VudCwgMC41KTsKICAgICAgICBwb2ludExpZ2h0LnBvc2l0aW9uLnNldCgtMTAsIDEwLCAtMTApOwogICAgICAgIHRoaXMuc2NlbmUuYWRkKHBvaW50TGlnaHQpOwogICAgfQogICAgCiAgICBzZXR1cEV2ZW50TGlzdGVuZXJzKCkgewogICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aHJlZS1jb250YWluZXInKTsKICAgICAgICAKICAgICAgICAvLyBNb3VzZSBjb250cm9scwogICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoZSkgPT4gewogICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmlzTW91c2VEb3duID0gdHJ1ZTsKICAgICAgICAgICAgdGhpcy5jb250cm9scy5sYXN0TW91c2VQb3NpdGlvbiA9IHsgeDogZS5jbGllbnRYLCB5OiBlLmNsaWVudFkgfTsKICAgICAgICB9KTsKICAgICAgICAKICAgICAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgKGUpID0+IHsKICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRyb2xzLmlzTW91c2VEb3duKSByZXR1cm47CiAgICAgICAgICAgIAogICAgICAgICAgICBjb25zdCBkZWx0YVggPSBlLmNsaWVudFggLSB0aGlzLmNvbnRyb2xzLmxhc3RNb3VzZVBvc2l0aW9uLng7CiAgICAgICAgICAgIGNvbnN0IGRlbHRhWSA9IGUuY2xpZW50WSAtIHRoaXMuY29udHJvbHMubGFzdE1vdXNlUG9zaXRpb24ueTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHRoaXMuY29udHJvbHMucm90YXRpb24ueSArPSBkZWx0YVggKiAwLjAxOwogICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnJvdGF0aW9uLnggKz0gZGVsdGFZICogMC4wMTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHRoaXMuY29udHJvbHMubGFzdE1vdXNlUG9zaXRpb24gPSB7IHg6IGUuY2xpZW50WCwgeTogZS5jbGllbnRZIH07CiAgICAgICAgfSk7CiAgICAgICAgCiAgICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAoKSA9PiB7CiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuaXNNb3VzZURvd24gPSBmYWxzZTsKICAgICAgICB9KTsKICAgICAgICAKICAgICAgICAvLyBXaGVlbCB6b29tCiAgICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgKGUpID0+IHsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnpvb20gKz0gZS5kZWx0YVkgKiAwLjE7CiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuem9vbSA9IE1hdGgubWF4KDEwLCBNYXRoLm1pbigxMDAsIHRoaXMuY29udHJvbHMuem9vbSkpOwogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIC8vIFdpbmRvdyByZXNpemUKICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4gewogICAgICAgICAgICB0aGlzLm9uV2luZG93UmVzaXplKCk7CiAgICAgICAgfSk7CiAgICAgICAgCiAgICAgICAgLy8gQ29udHJvbCBwYW5lbCBldmVudHMKICAgICAgICBjb25zdCB2aXpUeXBlU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Zpei10eXBlJyk7CiAgICAgICAgaWYgKHZpelR5cGVTZWxlY3QpIHsKICAgICAgICAgICAgdml6VHlwZVNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gewogICAgICAgICAgICAgICAgdGhpcy5sb2FkVmlzdWFsaXphdGlvbihlLnRhcmdldC52YWx1ZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBjb25zdCBjb2xvclNjaGVtZVNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb2xvci1zY2hlbWUnKTsKICAgICAgICBpZiAoY29sb3JTY2hlbWVTZWxlY3QpIHsKICAgICAgICAgICAgY29sb3JTY2hlbWVTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlQ29sb3JTY2hlbWUoZS50YXJnZXQudmFsdWUpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgY29uc3QgYW5pbWF0aW9uU3BlZWRSYW5nZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbmltYXRpb24tc3BlZWQnKTsKICAgICAgICBpZiAoYW5pbWF0aW9uU3BlZWRSYW5nZSkgewogICAgICAgICAgICBhbmltYXRpb25TcGVlZFJhbmdlLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHsKICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uU3BlZWQgPSBwYXJzZUZsb2F0KGUudGFyZ2V0LnZhbHVlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGNvbnN0IHJlc2V0Q2FtZXJhQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc2V0LWNhbWVyYScpOwogICAgICAgIGlmIChyZXNldENhbWVyYUJ0bikgewogICAgICAgICAgICByZXNldENhbWVyYUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgICAgICAgICAgIHRoaXMucmVzZXRDYW1lcmEoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBsb2FkVmlzdWFsaXphdGlvbih0eXBlKSB7CiAgICAgICAgdGhpcy5jbGVhclNjZW5lKCk7CiAgICAgICAgdGhpcy5jdXJyZW50VmlzdWFsaXphdGlvbiA9IHR5cGU7CiAgICAgICAgCiAgICAgICAgc3dpdGNoICh0eXBlKSB7CiAgICAgICAgICAgIGNhc2UgJ25ldHdvcmsnOgogICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVOZXR3b3JrR3JhcGgoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICd0aW1lbGluZS0zZCc6CiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZTNEVGltZWxpbmUoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICdjb250ZW50LWNsdXN0ZXJzJzoKICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29udGVudENsdXN0ZXJzKCk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAncmVsYXRpb25zaGlwLW1hcCc6CiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVJlbGF0aW9uc2hpcE1hcCgpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5ldHdvcmtHcmFwaCgpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgY3JlYXRlTmV0d29ya0dyYXBoKCkgewogICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGFNYW5hZ2VyLmdldERhdGEoKTsKICAgICAgICBpZiAoIWRhdGEgfHwgZGF0YS5sZW5ndGggPT09IDApIHJldHVybjsKICAgICAgICAKICAgICAgICAvLyBHcm91cCBieSBzb3VyY2UKICAgICAgICBjb25zdCBzb3VyY2VHcm91cHMgPSB7fTsKICAgICAgICBkYXRhLmZvckVhY2goaXRlbSA9PiB7CiAgICAgICAgICAgIGlmICghc291cmNlR3JvdXBzW2l0ZW0uc291cmNlXSkgewogICAgICAgICAgICAgICAgc291cmNlR3JvdXBzW2l0ZW0uc291cmNlXSA9IFtdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNvdXJjZUdyb3Vwc1tpdGVtLnNvdXJjZV0ucHVzaChpdGVtKTsKICAgICAgICB9KTsKICAgICAgICAKICAgICAgICBjb25zdCBzb3VyY2VzID0gT2JqZWN0LmtleXMoc291cmNlR3JvdXBzKTsKICAgICAgICBjb25zdCBjb2xvcnMgPSB0aGlzLmdldENvbG9yUGFsZXR0ZSgpOwogICAgICAgIAogICAgICAgIC8vIENyZWF0ZSBub2RlcwogICAgICAgIHNvdXJjZXMuZm9yRWFjaCgoc291cmNlLCBpbmRleCkgPT4gewogICAgICAgICAgICBjb25zdCBncm91cCA9IHNvdXJjZUdyb3Vwc1tzb3VyY2VdOwogICAgICAgICAgICBjb25zdCBub2RlR2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMSArIGdyb3VwLmxlbmd0aCAqIDAuMSwgMTYsIDE2KTsKICAgICAgICAgICAgY29uc3Qgbm9kZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHsgCiAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JzW2luZGV4ICUgY29sb3JzLmxlbmd0aF0sCiAgICAgICAgICAgICAgICB0cmFuc3BhcmVudDogdHJ1ZSwKICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuOAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgVEhSRUUuTWVzaChub2RlR2VvbWV0cnksIG5vZGVNYXRlcmlhbCk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBQb3NpdGlvbiBpbiBhIGNpcmNsZQogICAgICAgICAgICBjb25zdCBhbmdsZSA9IChpbmRleCAvIHNvdXJjZXMubGVuZ3RoKSAqIE1hdGguUEkgKiAyOwogICAgICAgICAgICBjb25zdCByYWRpdXMgPSAxNTsKICAgICAgICAgICAgbm9kZS5wb3NpdGlvbi5zZXQoCiAgICAgICAgICAgICAgICBNYXRoLmNvcyhhbmdsZSkgKiByYWRpdXMsCiAgICAgICAgICAgICAgICBNYXRoLnNpbihhbmdsZSkgKiByYWRpdXMsCiAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIAogICAgICAgICAgICBub2RlLnVzZXJEYXRhID0geyBzb3VyY2UsIGNvdW50OiBncm91cC5sZW5ndGggfTsKICAgICAgICAgICAgdGhpcy5zY2VuZS5hZGQobm9kZSk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBBZGQgdGV4dCBsYWJlbAogICAgICAgICAgICB0aGlzLmFkZFRleHRMYWJlbChzb3VyY2UsIG5vZGUucG9zaXRpb24pOwogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIC8vIENyZWF0ZSBjb25uZWN0aW9ucyBiZXR3ZWVuIHJlbGF0ZWQgc291cmNlcwogICAgICAgIHRoaXMuY3JlYXRlQ29ubmVjdGlvbnMoc291cmNlcywgc291cmNlR3JvdXBzKTsKICAgIH0KICAgIAogICAgY3JlYXRlM0RUaW1lbGluZSgpIHsKICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhTWFuYWdlci5nZXREYXRhKCk7CiAgICAgICAgaWYgKCFkYXRhIHx8IGRhdGEubGVuZ3RoID09PSAwKSByZXR1cm47CiAgICAgICAgCiAgICAgICAgLy8gU29ydCBieSBkYXRlCiAgICAgICAgY29uc3Qgc29ydGVkRGF0YSA9IGRhdGEuc29ydCgoYSwgYikgPT4gbmV3IERhdGUoYS5kYXRlKSAtIG5ldyBEYXRlKGIuZGF0ZSkpOwogICAgICAgIAogICAgICAgIGNvbnN0IGNvbG9ycyA9IHRoaXMuZ2V0Q29sb3JQYWxldHRlKCk7CiAgICAgICAgY29uc3QgdHlwZUNvbG9ycyA9IHt9OwogICAgICAgIGNvbnN0IHR5cGVzID0gWy4uLm5ldyBTZXQoZGF0YS5tYXAoaXRlbSA9PiBpdGVtLnR5cGUpKV07CiAgICAgICAgdHlwZXMuZm9yRWFjaCgodHlwZSwgaW5kZXgpID0+IHsKICAgICAgICAgICAgdHlwZUNvbG9yc1t0eXBlXSA9IGNvbG9yc1tpbmRleCAlIGNvbG9ycy5sZW5ndGhdOwogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIC8vIENyZWF0ZSB0aW1lbGluZSBwb2ludHMKICAgICAgICBzb3J0ZWREYXRhLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7CiAgICAgICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDAuNSwgOCwgOCk7CiAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHsgCiAgICAgICAgICAgICAgICBjb2xvcjogdHlwZUNvbG9yc1tpdGVtLnR5cGVdIHx8IGNvbG9yc1swXSwKICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLAogICAgICAgICAgICAgICAgb3BhY2l0eTogMC43CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAKICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gUG9zaXRpb24gYWxvbmcgdGltZWxpbmUKICAgICAgICAgICAgY29uc3QgdGltZWxpbmVMZW5ndGggPSA0MDsKICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBpbmRleCAvIChzb3J0ZWREYXRhLmxlbmd0aCAtIDEpOwogICAgICAgICAgICBwb2ludC5wb3NpdGlvbi5zZXQoCiAgICAgICAgICAgICAgICAocHJvZ3Jlc3MgLSAwLjUpICogdGltZWxpbmVMZW5ndGgsCiAgICAgICAgICAgICAgICBNYXRoLnNpbihwcm9ncmVzcyAqIE1hdGguUEkgKiA0KSAqIDUsCiAgICAgICAgICAgICAgICBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkgKiAyKSAqIDUKICAgICAgICAgICAgKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHBvaW50LnVzZXJEYXRhID0geyBpdGVtLCBpbmRleCB9OwogICAgICAgICAgICB0aGlzLnNjZW5lLmFkZChwb2ludCk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBBZGQgY29ubmVjdGluZyBsaW5lcwogICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7CiAgICAgICAgICAgICAgICBjb25zdCBwcmV2UG9pbnQgPSBzb3J0ZWREYXRhW2luZGV4IC0gMV07CiAgICAgICAgICAgICAgICBjb25zdCBsaW5lR2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKFsKICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMygKICAgICAgICAgICAgICAgICAgICAgICAgKChpbmRleCAtIDEpIC8gKHNvcnRlZERhdGEubGVuZ3RoIC0gMSkgLSAwLjUpICogdGltZWxpbmVMZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguc2luKCgoaW5kZXggLSAxKSAvIChzb3J0ZWREYXRhLmxlbmd0aCAtIDEpKSAqIE1hdGguUEkgKiA0KSAqIDUsCiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY29zKCgoaW5kZXggLSAxKSAvIChzb3J0ZWREYXRhLmxlbmd0aCAtIDEpKSAqIE1hdGguUEkgKiAyKSAqIDUKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIHBvaW50LnBvc2l0aW9uCiAgICAgICAgICAgICAgICBdKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY29uc3QgbGluZU1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHsgCiAgICAgICAgICAgICAgICAgICAgY29sb3I6IDB4NjY2NjY2LAogICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuMwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBuZXcgVEhSRUUuTGluZShsaW5lR2VvbWV0cnksIGxpbmVNYXRlcmlhbCk7CiAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLmFkZChsaW5lKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIC8vIEFkZCB0aW1lbGluZSBheGlzCiAgICAgICAgY29uc3QgYXhpc0dlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyhbCiAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKC10aW1lbGluZUxlbmd0aCAvIDIsIDAsIDApLAogICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMyh0aW1lbGluZUxlbmd0aCAvIDIsIDAsIDApCiAgICAgICAgXSk7CiAgICAgICAgCiAgICAgICAgY29uc3QgYXhpc01hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHsgY29sb3I6IDB4ODg4ODg4IH0pOwogICAgICAgIGNvbnN0IGF4aXMgPSBuZXcgVEhSRUUuTGluZShheGlzR2VvbWV0cnksIGF4aXNNYXRlcmlhbCk7CiAgICAgICAgdGhpcy5zY2VuZS5hZGQoYXhpcyk7CiAgICB9CiAgICAKICAgIGNyZWF0ZUNvbnRlbnRDbHVzdGVycygpIHsKICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhTWFuYWdlci5nZXREYXRhKCk7CiAgICAgICAgaWYgKCFkYXRhIHx8IGRhdGEubGVuZ3RoID09PSAwKSByZXR1cm47CiAgICAgICAgCiAgICAgICAgLy8gR3JvdXAgYnkgdGFncwogICAgICAgIGNvbnN0IHRhZ0dyb3VwcyA9IHt9OwogICAgICAgIGRhdGEuZm9yRWFjaChpdGVtID0+IHsKICAgICAgICAgICAgaXRlbS50YWdzLmZvckVhY2godGFnID0+IHsKICAgICAgICAgICAgICAgIGlmICghdGFnR3JvdXBzW3RhZ10pIHsKICAgICAgICAgICAgICAgICAgICB0YWdHcm91cHNbdGFnXSA9IFtdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGFnR3JvdXBzW3RhZ10ucHVzaChpdGVtKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgICAgCiAgICAgICAgY29uc3QgdGFncyA9IE9iamVjdC5rZXlzKHRhZ0dyb3Vwcyk7CiAgICAgICAgY29uc3QgY29sb3JzID0gdGhpcy5nZXRDb2xvclBhbGV0dGUoKTsKICAgICAgICAKICAgICAgICAvLyBDcmVhdGUgY2x1c3RlcnMKICAgICAgICB0YWdzLmZvckVhY2goKHRhZywgaW5kZXgpID0+IHsKICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSB0YWdHcm91cHNbdGFnXTsKICAgICAgICAgICAgY29uc3QgY2x1c3Rlckdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDIgKyBncm91cC5sZW5ndGggKiAwLjIsIDE2LCAxNik7CiAgICAgICAgICAgIGNvbnN0IGNsdXN0ZXJNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IAogICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yc1tpbmRleCAlIGNvbG9ycy5sZW5ndGhdLAogICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsCiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjYKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBjb25zdCBjbHVzdGVyID0gbmV3IFRIUkVFLk1lc2goY2x1c3Rlckdlb21ldHJ5LCBjbHVzdGVyTWF0ZXJpYWwpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gUG9zaXRpb24gaW4gYSBzcGlyYWwKICAgICAgICAgICAgY29uc3QgYW5nbGUgPSAoaW5kZXggLyB0YWdzLmxlbmd0aCkgKiBNYXRoLlBJICogNDsKICAgICAgICAgICAgY29uc3QgcmFkaXVzID0gOCArIGluZGV4ICogMjsKICAgICAgICAgICAgY2x1c3Rlci5wb3NpdGlvbi5zZXQoCiAgICAgICAgICAgICAgICBNYXRoLmNvcyhhbmdsZSkgKiByYWRpdXMsCiAgICAgICAgICAgICAgICBNYXRoLnNpbihhbmdsZSkgKiByYWRpdXMsCiAgICAgICAgICAgICAgICBpbmRleCAqIDIKICAgICAgICAgICAgKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNsdXN0ZXIudXNlckRhdGEgPSB7IHRhZywgY291bnQ6IGdyb3VwLmxlbmd0aCB9OwogICAgICAgICAgICB0aGlzLnNjZW5lLmFkZChjbHVzdGVyKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIEFkZCB0ZXh0IGxhYmVsCiAgICAgICAgICAgIHRoaXMuYWRkVGV4dExhYmVsKGAke3RhZ30gKCR7Z3JvdXAubGVuZ3RofSlgLCBjbHVzdGVyLnBvc2l0aW9uKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIEFkZCBzbWFsbGVyIG5vZGVzIGZvciBpbmRpdmlkdWFsIGl0ZW1zCiAgICAgICAgICAgIGdyb3VwLmZvckVhY2goKGl0ZW0sIGl0ZW1JbmRleCkgPT4gewogICAgICAgICAgICAgICAgY29uc3QgaXRlbUdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDAuMywgOCwgOCk7CiAgICAgICAgICAgICAgICBjb25zdCBpdGVtTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyAKICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JzW2luZGV4ICUgY29sb3JzLmxlbmd0aF0sCiAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC44CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY29uc3QgaXRlbU5vZGUgPSBuZXcgVEhSRUUuTWVzaChpdGVtR2VvbWV0cnksIGl0ZW1NYXRlcmlhbCk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIFBvc2l0aW9uIGFyb3VuZCBjbHVzdGVyCiAgICAgICAgICAgICAgICBjb25zdCBpdGVtQW5nbGUgPSAoaXRlbUluZGV4IC8gZ3JvdXAubGVuZ3RoKSAqIE1hdGguUEkgKiAyOwogICAgICAgICAgICAgICAgY29uc3QgaXRlbVJhZGl1cyA9IDMgKyBncm91cC5sZW5ndGggKiAwLjE7CiAgICAgICAgICAgICAgICBpdGVtTm9kZS5wb3NpdGlvbi5zZXQoCiAgICAgICAgICAgICAgICAgICAgY2x1c3Rlci5wb3NpdGlvbi54ICsgTWF0aC5jb3MoaXRlbUFuZ2xlKSAqIGl0ZW1SYWRpdXMsCiAgICAgICAgICAgICAgICAgICAgY2x1c3Rlci5wb3NpdGlvbi55ICsgTWF0aC5zaW4oaXRlbUFuZ2xlKSAqIGl0ZW1SYWRpdXMsCiAgICAgICAgICAgICAgICAgICAgY2x1c3Rlci5wb3NpdGlvbi56CiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpdGVtTm9kZS51c2VyRGF0YSA9IHsgaXRlbSB9OwogICAgICAgICAgICAgICAgdGhpcy5zY2VuZS5hZGQoaXRlbU5vZGUpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH0KICAgIAogICAgY3JlYXRlUmVsYXRpb25zaGlwTWFwKCkgewogICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGFNYW5hZ2VyLmdldERhdGEoKTsKICAgICAgICBpZiAoIWRhdGEgfHwgZGF0YS5sZW5ndGggPT09IDApIHJldHVybjsKICAgICAgICAKICAgICAgICAvLyBDcmVhdGUgcmVsYXRpb25zaGlwIG1hdHJpeAogICAgICAgIGNvbnN0IHNvdXJjZXMgPSBbLi4ubmV3IFNldChkYXRhLm1hcChpdGVtID0+IGl0ZW0uc291cmNlKSldOwogICAgICAgIGNvbnN0IHJlbGF0aW9uc2hpcHMgPSB7fTsKICAgICAgICAKICAgICAgICBzb3VyY2VzLmZvckVhY2goc291cmNlMSA9PiB7CiAgICAgICAgICAgIHJlbGF0aW9uc2hpcHNbc291cmNlMV0gPSB7fTsKICAgICAgICAgICAgc291cmNlcy5mb3JFYWNoKHNvdXJjZTIgPT4gewogICAgICAgICAgICAgICAgaWYgKHNvdXJjZTEgIT09IHNvdXJjZTIpIHsKICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIGNvbW1vbiB0YWdzIGJldHdlZW4gc291cmNlcwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZTFUYWdzID0gbmV3IFNldCgpOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZTJUYWdzID0gbmV3IFNldCgpOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEuZmlsdGVyKGl0ZW0gPT4gaXRlbS5zb3VyY2UgPT09IHNvdXJjZTEpLmZvckVhY2goaXRlbSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udGFncy5mb3JFYWNoKHRhZyA9PiBzb3VyY2UxVGFncy5hZGQodGFnKSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZGF0YS5maWx0ZXIoaXRlbSA9PiBpdGVtLnNvdXJjZSA9PT0gc291cmNlMikuZm9yRWFjaChpdGVtID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS50YWdzLmZvckVhY2godGFnID0+IHNvdXJjZTJUYWdzLmFkZCh0YWcpKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21tb25UYWdzID0gWy4uLnNvdXJjZTFUYWdzXS5maWx0ZXIodGFnID0+IHNvdXJjZTJUYWdzLmhhcyh0YWcpKTsKICAgICAgICAgICAgICAgICAgICByZWxhdGlvbnNoaXBzW3NvdXJjZTFdW3NvdXJjZTJdID0gY29tbW9uVGFncy5sZW5ndGg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIGNvbnN0IGNvbG9ycyA9IHRoaXMuZ2V0Q29sb3JQYWxldHRlKCk7CiAgICAgICAgCiAgICAgICAgLy8gQ3JlYXRlIG5vZGVzIGZvciBzb3VyY2VzCiAgICAgICAgc291cmNlcy5mb3JFYWNoKChzb3VyY2UsIGluZGV4KSA9PiB7CiAgICAgICAgICAgIGNvbnN0IG5vZGVHZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSgxLjUsIDE2LCAxNik7CiAgICAgICAgICAgIGNvbnN0IG5vZGVNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IAogICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yc1tpbmRleCAlIGNvbG9ycy5sZW5ndGhdLAogICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsCiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjgKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBjb25zdCBub2RlID0gbmV3IFRIUkVFLk1lc2gobm9kZUdlb21ldHJ5LCBub2RlTWF0ZXJpYWwpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gUG9zaXRpb24gaW4gYSBncmlkCiAgICAgICAgICAgIGNvbnN0IGdyaWRTaXplID0gTWF0aC5jZWlsKE1hdGguc3FydChzb3VyY2VzLmxlbmd0aCkpOwogICAgICAgICAgICBjb25zdCBzcGFjaW5nID0gODsKICAgICAgICAgICAgbm9kZS5wb3NpdGlvbi5zZXQoCiAgICAgICAgICAgICAgICAoaW5kZXggJSBncmlkU2l6ZSAtIChncmlkU2l6ZSAtIDEpIC8gMikgKiBzcGFjaW5nLAogICAgICAgICAgICAgICAgKE1hdGguZmxvb3IoaW5kZXggLyBncmlkU2l6ZSkgLSAoZ3JpZFNpemUgLSAxKSAvIDIpICogc3BhY2luZywKICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIG5vZGUudXNlckRhdGEgPSB7IHNvdXJjZSB9OwogICAgICAgICAgICB0aGlzLnNjZW5lLmFkZChub2RlKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIEFkZCB0ZXh0IGxhYmVsCiAgICAgICAgICAgIHRoaXMuYWRkVGV4dExhYmVsKHNvdXJjZSwgbm9kZS5wb3NpdGlvbik7CiAgICAgICAgfSk7CiAgICAgICAgCiAgICAgICAgLy8gQ3JlYXRlIHJlbGF0aW9uc2hpcCBsaW5lcwogICAgICAgIHNvdXJjZXMuZm9yRWFjaCgoc291cmNlMSwgaW5kZXgxKSA9PiB7CiAgICAgICAgICAgIHNvdXJjZXMuZm9yRWFjaCgoc291cmNlMiwgaW5kZXgyKSA9PiB7CiAgICAgICAgICAgICAgICBpZiAoaW5kZXgxIDwgaW5kZXgyICYmIHJlbGF0aW9uc2hpcHNbc291cmNlMV1bc291cmNlMl0gPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyZW5ndGggPSByZWxhdGlvbnNoaXBzW3NvdXJjZTFdW3NvdXJjZTJdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVHZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoWwogICAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMygKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpbmRleDEgJSBncmlkU2l6ZSAtIChncmlkU2l6ZSAtIDEpIC8gMikgKiBzcGFjaW5nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKE1hdGguZmxvb3IoaW5kZXgxIC8gZ3JpZFNpemUpIC0gKGdyaWRTaXplIC0gMSkgLyAyKSAqIHNwYWNpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKGluZGV4MiAlIGdyaWRTaXplIC0gKGdyaWRTaXplIC0gMSkgLyAyKSAqIHNwYWNpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoTWF0aC5mbG9vcihpbmRleDIgLyBncmlkU2l6ZSkgLSAoZ3JpZFNpemUgLSAxKSAvIDIpICogc3BhY2luZywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVNYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7IAogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogMHhmZmZmZmYsCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBNYXRoLm1pbigwLjgsIHN0cmVuZ3RoICogMC4yKQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBuZXcgVEhSRUUuTGluZShsaW5lR2VvbWV0cnksIGxpbmVNYXRlcmlhbCk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2VuZS5hZGQobGluZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfQogICAgCiAgICBjcmVhdGVDb25uZWN0aW9ucyhzb3VyY2VzLCBzb3VyY2VHcm91cHMpIHsKICAgICAgICBjb25zdCBjb2xvcnMgPSB0aGlzLmdldENvbG9yUGFsZXR0ZSgpOwogICAgICAgIAogICAgICAgIHNvdXJjZXMuZm9yRWFjaCgoc291cmNlMSwgaW5kZXgxKSA9PiB7CiAgICAgICAgICAgIHNvdXJjZXMuZm9yRWFjaCgoc291cmNlMiwgaW5kZXgyKSA9PiB7CiAgICAgICAgICAgICAgICBpZiAoaW5kZXgxIDwgaW5kZXgyKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gRmluZCBjb21tb24gdGFncwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZTFUYWdzID0gbmV3IFNldCgpOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZTJUYWdzID0gbmV3IFNldCgpOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHNvdXJjZUdyb3Vwc1tzb3VyY2UxXS5mb3JFYWNoKGl0ZW0gPT4gewogICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnRhZ3MuZm9yRWFjaCh0YWcgPT4gc291cmNlMVRhZ3MuYWRkKHRhZykpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHNvdXJjZUdyb3Vwc1tzb3VyY2UyXS5mb3JFYWNoKGl0ZW0gPT4gewogICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnRhZ3MuZm9yRWFjaCh0YWcgPT4gc291cmNlMlRhZ3MuYWRkKHRhZykpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1vblRhZ3MgPSBbLi4uc291cmNlMVRhZ3NdLmZpbHRlcih0YWcgPT4gc291cmNlMlRhZ3MuaGFzKHRhZykpOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIChjb21tb25UYWdzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5nbGUxID0gKGluZGV4MSAvIHNvdXJjZXMubGVuZ3RoKSAqIE1hdGguUEkgKiAyOwogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmdsZTIgPSAoaW5kZXgyIC8gc291cmNlcy5sZW5ndGgpICogTWF0aC5QSSAqIDI7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhZGl1cyA9IDE1OwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZUdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyhbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmNvcyhhbmdsZTEpICogcmFkaXVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguc2luKGFuZ2xlMSkgKiByYWRpdXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5WZWN0b3IzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY29zKGFuZ2xlMikgKiByYWRpdXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oYW5nbGUyKSAqIHJhZGl1cywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZU1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHsgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JzW01hdGgubWluKGluZGV4MSwgaW5kZXgyKSAlIGNvbG9ycy5sZW5ndGhdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBNYXRoLm1pbigwLjYsIGNvbW1vblRhZ3MubGVuZ3RoICogMC4yKQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBuZXcgVEhSRUUuTGluZShsaW5lR2VvbWV0cnksIGxpbmVNYXRlcmlhbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUuYWRkKGxpbmUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9CiAgICAKICAgIGFkZFRleHRMYWJlbCh0ZXh0LCBwb3NpdGlvbikgewogICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOwogICAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKICAgICAgICBjYW52YXMud2lkdGggPSAyNTY7CiAgICAgICAgY2FudmFzLmhlaWdodCA9IDY0OwogICAgICAgIAogICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ3doaXRlJzsKICAgICAgICBjb250ZXh0LmZvbnQgPSAnMjRweCBJbnRlcic7CiAgICAgICAgY29udGV4dC50ZXh0QWxpZ24gPSAnY2VudGVyJzsKICAgICAgICBjb250ZXh0LmZpbGxUZXh0KHRleHQsIDEyOCwgMzIpOwogICAgICAgIAogICAgICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVEhSRUUuQ2FudmFzVGV4dHVyZShjYW52YXMpOwogICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLlNwcml0ZU1hdGVyaWFsKHsgbWFwOiB0ZXh0dXJlIH0pOwogICAgICAgIGNvbnN0IHNwcml0ZSA9IG5ldyBUSFJFRS5TcHJpdGUobWF0ZXJpYWwpOwogICAgICAgIAogICAgICAgIHNwcml0ZS5wb3NpdGlvbi5jb3B5KHBvc2l0aW9uKTsKICAgICAgICBzcHJpdGUucG9zaXRpb24ueSArPSAyOwogICAgICAgIHNwcml0ZS5zY2FsZS5zZXQoNCwgMSwgMSk7CiAgICAgICAgCiAgICAgICAgdGhpcy5zY2VuZS5hZGQoc3ByaXRlKTsKICAgIH0KICAgIAogICAgZ2V0Q29sb3JQYWxldHRlKCkgewogICAgICAgIGNvbnN0IHNjaGVtZSA9IHRoaXMuY29sb3JTY2hlbWVzW3RoaXMuY29sb3JTY2hlbWVdOwogICAgICAgIHJldHVybiBbc2NoZW1lLnByaW1hcnksIHNjaGVtZS5zZWNvbmRhcnksIHNjaGVtZS5hY2NlbnRdOwogICAgfQogICAgCiAgICBjaGFuZ2VDb2xvclNjaGVtZShzY2hlbWUpIHsKICAgICAgICB0aGlzLmNvbG9yU2NoZW1lID0gc2NoZW1lOwogICAgICAgIHRoaXMuc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvcih0aGlzLmNvbG9yU2NoZW1lc1tzY2hlbWVdLmJhY2tncm91bmQpOwogICAgICAgIHRoaXMuc2NlbmUuZm9nID0gbmV3IFRIUkVFLkZvZyh0aGlzLmNvbG9yU2NoZW1lc1tzY2hlbWVdLmJhY2tncm91bmQsIDUwLCAyMDApOwogICAgICAgIAogICAgICAgIC8vIFJlbG9hZCBjdXJyZW50IHZpc3VhbGl6YXRpb24gd2l0aCBuZXcgY29sb3JzCiAgICAgICAgaWYgKHRoaXMuY3VycmVudFZpc3VhbGl6YXRpb24pIHsKICAgICAgICAgICAgdGhpcy5sb2FkVmlzdWFsaXphdGlvbih0aGlzLmN1cnJlbnRWaXN1YWxpemF0aW9uKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIHNldFBlcmZvcm1hbmNlTW9kZShtb2RlKSB7CiAgICAgICAgdGhpcy5wZXJmb3JtYW5jZU1vZGUgPSBtb2RlOwogICAgICAgIAogICAgICAgIHN3aXRjaCAobW9kZSkgewogICAgICAgICAgICBjYXNlICdwZXJmb3JtYW5jZSc6CiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFBpeGVsUmF0aW8oMSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAncXVhbGl0eSc6CiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFBpeGVsUmF0aW8oTWF0aC5taW4od2luZG93LmRldmljZVBpeGVsUmF0aW8sIDIpKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQaXhlbFJhdGlvKE1hdGgubWluKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCAxLjUpKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIHNldEFuaW1hdGlvbnNFbmFibGVkKGVuYWJsZWQpIHsKICAgICAgICB0aGlzLmFuaW1hdGlvbnNFbmFibGVkID0gZW5hYmxlZDsKICAgIH0KICAgIAogICAgcmVzZXRDYW1lcmEoKSB7CiAgICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDUwKTsKICAgICAgICB0aGlzLmNvbnRyb2xzLnJvdGF0aW9uID0geyB4OiAwLCB5OiAwIH07CiAgICAgICAgdGhpcy5jb250cm9scy56b29tID0gNTA7CiAgICB9CiAgICAKICAgIGNsZWFyU2NlbmUoKSB7CiAgICAgICAgLy8gUmVtb3ZlIGFsbCBvYmplY3RzIGV4Y2VwdCBsaWdodHMKICAgICAgICBjb25zdCBvYmplY3RzVG9SZW1vdmUgPSBbXTsKICAgICAgICB0aGlzLnNjZW5lLnRyYXZlcnNlKChvYmplY3QpID0+IHsKICAgICAgICAgICAgaWYgKG9iamVjdC50eXBlICE9PSAnTGlnaHQnICYmIG9iamVjdC50eXBlICE9PSAnQW1iaWVudExpZ2h0JyAmJiAKICAgICAgICAgICAgICAgIG9iamVjdC50eXBlICE9PSAnRGlyZWN0aW9uYWxMaWdodCcgJiYgb2JqZWN0LnR5cGUgIT09ICdQb2ludExpZ2h0JykgewogICAgICAgICAgICAgICAgb2JqZWN0c1RvUmVtb3ZlLnB1c2gob2JqZWN0KTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIG9iamVjdHNUb1JlbW92ZS5mb3JFYWNoKG9iamVjdCA9PiB7CiAgICAgICAgICAgIHRoaXMuc2NlbmUucmVtb3ZlKG9iamVjdCk7CiAgICAgICAgfSk7CiAgICB9CiAgICAKICAgIG9uV2luZG93UmVzaXplKCkgewogICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aHJlZS1jb250YWluZXInKTsKICAgICAgICBpZiAoIWNvbnRhaW5lcikgcmV0dXJuOwogICAgICAgIAogICAgICAgIGNvbnN0IHdpZHRoID0gY29udGFpbmVyLmNsaWVudFdpZHRoOwogICAgICAgIGNvbnN0IGhlaWdodCA9IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7CiAgICAgICAgCiAgICAgICAgdGhpcy5jYW1lcmEuYXNwZWN0ID0gd2lkdGggLyBoZWlnaHQ7CiAgICAgICAgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpOwogICAgICAgIAogICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTsKICAgIH0KICAgIAogICAgYW5pbWF0ZSgpIHsKICAgICAgICB0aGlzLmFuaW1hdGlvbklkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuYW5pbWF0ZSgpKTsKICAgICAgICAKICAgICAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCkgcmV0dXJuOwogICAgICAgIAogICAgICAgIC8vIFVwZGF0ZSBjYW1lcmEgYmFzZWQgb24gY29udHJvbHMKICAgICAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi54ID0gTWF0aC5zaW4odGhpcy5jb250cm9scy5yb3RhdGlvbi55KSAqIHRoaXMuY29udHJvbHMuem9vbTsKICAgICAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi56ID0gTWF0aC5jb3ModGhpcy5jb250cm9scy5yb3RhdGlvbi55KSAqIHRoaXMuY29udHJvbHMuem9vbTsKICAgICAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi55ID0gTWF0aC5zaW4odGhpcy5jb250cm9scy5yb3RhdGlvbi54KSAqIHRoaXMuY29udHJvbHMuem9vbTsKICAgICAgICB0aGlzLmNhbWVyYS5sb29rQXQoMCwgMCwgMCk7CiAgICAgICAgCiAgICAgICAgLy8gQW5pbWF0ZSBzY2VuZSBvYmplY3RzCiAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uc0VuYWJsZWQpIHsKICAgICAgICAgICAgdGhpcy5zY2VuZS50cmF2ZXJzZSgob2JqZWN0KSA9PiB7CiAgICAgICAgICAgICAgICBpZiAob2JqZWN0LnR5cGUgPT09ICdNZXNoJyAmJiBvYmplY3QudXNlckRhdGEpIHsKICAgICAgICAgICAgICAgICAgICBvYmplY3Qucm90YXRpb24ueSArPSAwLjAxICogdGhpcy5hbmltYXRpb25TcGVlZDsKICAgICAgICAgICAgICAgICAgICBvYmplY3QucG9zaXRpb24ueSArPSBNYXRoLnNpbihEYXRlLm5vdygpICogMC4wMDEgKyBvYmplY3QucG9zaXRpb24ueCkgKiAwLjAxICogdGhpcy5hbmltYXRpb25TcGVlZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKTsKICAgIH0KICAgIAogICAgZGVzdHJveSgpIHsKICAgICAgICBpZiAodGhpcy5hbmltYXRpb25JZCkgewogICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGlvbklkKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIpIHsKICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5kaXNwb3NlKCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IGZhbHNlOwogICAgfQp9CgpleHBvcnQgeyBWaXN1YWxpemF0aW9uTWFuYWdlciB9OyA=
--boundary-gjssvzyld
Content-Type: application/javascript
Content-Transfer-Encoding: base64
Content-Location: js/timeline.js

Ly8gUGhvZW5peCBDb2RleCAtIFRpbWVsaW5lIE1vZHVsZQppbXBvcnQgeyBEYXRhTWFuYWdlciB9IGZyb20gJy4vdXRpbHMuanMnOwoKY2xhc3MgVGltZWxpbmVNYW5hZ2VyIHsKICAgIGNvbnN0cnVjdG9yKCkgewogICAgICAgIHRoaXMuZGF0YSA9IFtdOwogICAgICAgIHRoaXMuZmlsdGVyZWREYXRhID0gW107CiAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVyID0gJ2FsbCc7CiAgICAgICAgdGhpcy5kYXRlUmFuZ2UgPSB7IHN0YXJ0OiBudWxsLCBlbmQ6IG51bGwgfTsKICAgICAgICB0aGlzLmFuaW1hdGlvbnNFbmFibGVkID0gdHJ1ZTsKICAgICAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSBmYWxzZTsKICAgICAgICAKICAgICAgICB0aGlzLmRhdGFNYW5hZ2VyID0gbmV3IERhdGFNYW5hZ2VyKCk7CiAgICB9CiAgICAKICAgIGluaXQoKSB7CiAgICAgICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZCkgcmV0dXJuOwogICAgICAgIAogICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZGF0YU1hbmFnZXIuZ2V0RGF0YSgpOwogICAgICAgIHRoaXMuZmlsdGVyZWREYXRhID0gWy4uLnRoaXMuZGF0YV07CiAgICAgICAgCiAgICAgICAgdGhpcy5zZXR1cEV2ZW50TGlzdGVuZXJzKCk7CiAgICAgICAgdGhpcy51cGRhdGVUaW1lbGluZSgpOwogICAgICAgIAogICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7CiAgICB9CiAgICAKICAgIHNldHVwRXZlbnRMaXN0ZW5lcnMoKSB7CiAgICAgICAgLy8gRGF0ZSByYW5nZSBwaWNrZXIKICAgICAgICBjb25zdCBzdGFydERhdGVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFydC1kYXRlJyk7CiAgICAgICAgY29uc3QgZW5kRGF0ZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VuZC1kYXRlJyk7CiAgICAgICAgY29uc3QgYXBwbHlEYXRlUmFuZ2VCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwbHktZGF0ZS1yYW5nZScpOwogICAgICAgIAogICAgICAgIGlmIChzdGFydERhdGVJbnB1dCAmJiBlbmREYXRlSW5wdXQgJiYgYXBwbHlEYXRlUmFuZ2VCdG4pIHsKICAgICAgICAgICAgYXBwbHlEYXRlUmFuZ2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7CiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5RGF0ZVJhbmdlKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBUeXBlIGZpbHRlcgogICAgICAgIGNvbnN0IHR5cGVGaWx0ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGltZWxpbmUtdHlwZS1maWx0ZXInKTsKICAgICAgICBpZiAodHlwZUZpbHRlcikgewogICAgICAgICAgICB0eXBlRmlsdGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlckJ5VHlwZShlLnRhcmdldC52YWx1ZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0KICAgIAogICAgYXBwbHlEYXRlUmFuZ2UoKSB7CiAgICAgICAgY29uc3Qgc3RhcnREYXRlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhcnQtZGF0ZScpOwogICAgICAgIGNvbnN0IGVuZERhdGVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmQtZGF0ZScpOwogICAgICAgIAogICAgICAgIGlmIChzdGFydERhdGVJbnB1dCAmJiBlbmREYXRlSW5wdXQpIHsKICAgICAgICAgICAgY29uc3Qgc3RhcnREYXRlID0gc3RhcnREYXRlSW5wdXQudmFsdWUgPyBuZXcgRGF0ZShzdGFydERhdGVJbnB1dC52YWx1ZSkgOiBudWxsOwogICAgICAgICAgICBjb25zdCBlbmREYXRlID0gZW5kRGF0ZUlucHV0LnZhbHVlID8gbmV3IERhdGUoZW5kRGF0ZUlucHV0LnZhbHVlKSA6IG51bGw7CiAgICAgICAgICAgIAogICAgICAgICAgICB0aGlzLmRhdGVSYW5nZSA9IHsgc3RhcnQ6IHN0YXJ0RGF0ZSwgZW5kOiBlbmREYXRlIH07CiAgICAgICAgICAgIHRoaXMudXBkYXRlVGltZWxpbmUoKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGZpbHRlckJ5VHlwZSh0eXBlKSB7CiAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVyID0gdHlwZTsKICAgICAgICB0aGlzLnVwZGF0ZVRpbWVsaW5lKCk7CiAgICB9CiAgICAKICAgIHVwZGF0ZVRpbWVsaW5lKCkgewogICAgICAgIC8vIEFwcGx5IGZpbHRlcnMKICAgICAgICB0aGlzLmZpbHRlcmVkRGF0YSA9IHRoaXMuZGF0YS5maWx0ZXIoaXRlbSA9PiB7CiAgICAgICAgICAgIC8vIFR5cGUgZmlsdGVyCiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRGaWx0ZXIgIT09ICdhbGwnICYmIGl0ZW0udHlwZSAhPT0gdGhpcy5jdXJyZW50RmlsdGVyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIERhdGUgcmFuZ2UgZmlsdGVyCiAgICAgICAgICAgIGlmICh0aGlzLmRhdGVSYW5nZS5zdGFydCB8fCB0aGlzLmRhdGVSYW5nZS5lbmQpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1EYXRlID0gbmV3IERhdGUoaXRlbS5kYXRlKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0ZVJhbmdlLnN0YXJ0ICYmIGl0ZW1EYXRlIDwgdGhpcy5kYXRlUmFuZ2Uuc3RhcnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGVSYW5nZS5lbmQgJiYgaXRlbURhdGUgPiB0aGlzLmRhdGVSYW5nZS5lbmQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIHRoaXMucmVuZGVyVGltZWxpbmUoKTsKICAgIH0KICAgIAogICAgcmVuZGVyVGltZWxpbmUoKSB7CiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpbWVsaW5lLXZpc3VhbGl6YXRpb24nKTsKICAgICAgICBpZiAoIWNvbnRhaW5lcikgcmV0dXJuOwogICAgICAgIAogICAgICAgIC8vIENsZWFyIGNvbnRhaW5lcgogICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJzsKICAgICAgICAKICAgICAgICBpZiAodGhpcy5maWx0ZXJlZERhdGEubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSBgCiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXI7IHBhZGRpbmc6IDJyZW07IGNvbG9yOiAjNjY2OyI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1jYWxlbmRhci10aW1lcyIgc3R5bGU9ImZvbnQtc2l6ZTogM3JlbTsgbWFyZ2luLWJvdHRvbTogMXJlbTsgb3BhY2l0eTogMC41OyI+PC9pPgogICAgICAgICAgICAgICAgICAgIDxwPk5vIGRhdGEgbWF0Y2hlcyB0aGUgY3VycmVudCBmaWx0ZXJzPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIGA7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gU29ydCBieSBkYXRlCiAgICAgICAgY29uc3Qgc29ydGVkRGF0YSA9IHRoaXMuZmlsdGVyZWREYXRhLnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGEuZGF0ZSkgLSBuZXcgRGF0ZShiLmRhdGUpKTsKICAgICAgICAKICAgICAgICAvLyBDcmVhdGUgdGltZWxpbmUKICAgICAgICBjb25zdCB0aW1lbGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIHRpbWVsaW5lLmNsYXNzTmFtZSA9ICd0aW1lbGluZSc7CiAgICAgICAgdGltZWxpbmUuc3R5bGUuY3NzVGV4dCA9IGAKICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgICBwYWRkaW5nOiAycmVtIDA7CiAgICAgICAgICAgIG1heC1oZWlnaHQ6IDYwMHB4OwogICAgICAgICAgICBvdmVyZmxvdy15OiBhdXRvOwogICAgICAgIGA7CiAgICAgICAgCiAgICAgICAgLy8gQWRkIHRpbWVsaW5lIGxpbmUKICAgICAgICBjb25zdCB0aW1lbGluZUxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICB0aW1lbGluZUxpbmUuc3R5bGUuY3NzVGV4dCA9IGAKICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICAgICBsZWZ0OiA1MHB4OwogICAgICAgICAgICB0b3A6IDA7CiAgICAgICAgICAgIGJvdHRvbTogMDsKICAgICAgICAgICAgd2lkdGg6IDJweDsKICAgICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgdmFyKC0tcHJpbWFyeSksIHZhcigtLXNlY29uZGFyeSkpOwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxcHg7CiAgICAgICAgYDsKICAgICAgICB0aW1lbGluZS5hcHBlbmRDaGlsZCh0aW1lbGluZUxpbmUpOwogICAgICAgIAogICAgICAgIC8vIENyZWF0ZSB0aW1lbGluZSBpdGVtcwogICAgICAgIHNvcnRlZERhdGEuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHsKICAgICAgICAgICAgY29uc3QgdGltZWxpbmVJdGVtID0gdGhpcy5jcmVhdGVUaW1lbGluZUl0ZW0oaXRlbSwgaW5kZXgpOwogICAgICAgICAgICB0aW1lbGluZS5hcHBlbmRDaGlsZCh0aW1lbGluZUl0ZW0pOwogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aW1lbGluZSk7CiAgICAgICAgCiAgICAgICAgLy8gQWRkIHNjcm9sbCBhbmltYXRpb24gaWYgZW5hYmxlZAogICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbnNFbmFibGVkKSB7CiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZVRpbWVsaW5lSXRlbXMoKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGNyZWF0ZVRpbWVsaW5lSXRlbShpdGVtLCBpbmRleCkgewogICAgICAgIGNvbnN0IHRpbWVsaW5lSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIHRpbWVsaW5lSXRlbS5jbGFzc05hbWUgPSAndGltZWxpbmUtaXRlbSc7CiAgICAgICAgdGltZWxpbmVJdGVtLnN0eWxlLmNzc1RleHQgPSBgCiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgICAgbWFyZ2luOiAycmVtIDA7CiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogODBweDsKICAgICAgICAgICAgb3BhY2l0eTogMDsKICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0yMHB4KTsKICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZTsKICAgICAgICBgOwogICAgICAgIAogICAgICAgIC8vIFRpbWVsaW5lIGRvdAogICAgICAgIGNvbnN0IGRvdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIGRvdC5zdHlsZS5jc3NUZXh0ID0gYAogICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgICAgIGxlZnQ6IDQ0cHg7CiAgICAgICAgICAgIHRvcDogMDsKICAgICAgICAgICAgd2lkdGg6IDEycHg7CiAgICAgICAgICAgIGhlaWdodDogMTJweDsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlOwogICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1wcmltYXJ5KTsKICAgICAgICAgICAgYm9yZGVyOiAzcHggc29saWQgd2hpdGU7CiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDJweCB2YXIoLS1wcmltYXJ5KTsKICAgICAgICAgICAgei1pbmRleDogMjsKICAgICAgICBgOwogICAgICAgIHRpbWVsaW5lSXRlbS5hcHBlbmRDaGlsZChkb3QpOwogICAgICAgIAogICAgICAgIC8vIENvbnRlbnQgY2FyZAogICAgICAgIGNvbnN0IGNvbnRlbnRDYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgY29udGVudENhcmQuc3R5bGUuY3NzVGV4dCA9IGAKICAgICAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDsKICAgICAgICAgICAgcGFkZGluZzogMXJlbTsKICAgICAgICAgICAgYm94LXNoYWRvdzogMCAycHggOHB4IHJnYmEoMCwgMCwgMCwgMC4xKTsKICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCB2YXIoLS1wcmltYXJ5KTsKICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZTsKICAgICAgICBgOwogICAgICAgIAogICAgICAgIC8vIEhlYWRlcgogICAgICAgIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIGhlYWRlci5zdHlsZS5jc3NUZXh0ID0gYAogICAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTsKICAgICAgICBgOwogICAgICAgIAogICAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDQnKTsKICAgICAgICB0aXRsZS50ZXh0Q29udGVudCA9IGl0ZW0uc291cmNlOwogICAgICAgIHRpdGxlLnN0eWxlLmNzc1RleHQgPSBgCiAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAgICAgY29sb3I6IHZhcigtLWRhcmspOwogICAgICAgICAgICBmb250LXdlaWdodDogNjAwOwogICAgICAgIGA7CiAgICAgICAgCiAgICAgICAgY29uc3QgZGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKICAgICAgICBkYXRlLnRleHRDb250ZW50ID0gbmV3IERhdGUoaXRlbS5kYXRlKS50b0xvY2FsZURhdGVTdHJpbmcoKTsKICAgICAgICBkYXRlLnN0eWxlLmNzc1RleHQgPSBgCiAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44NzVyZW07CiAgICAgICAgICAgIGNvbG9yOiAjNjY2OwogICAgICAgIGA7CiAgICAgICAgCiAgICAgICAgaGVhZGVyLmFwcGVuZENoaWxkKHRpdGxlKTsKICAgICAgICBoZWFkZXIuYXBwZW5kQ2hpbGQoZGF0ZSk7CiAgICAgICAgY29udGVudENhcmQuYXBwZW5kQ2hpbGQoaGVhZGVyKTsKICAgICAgICAKICAgICAgICAvLyBUeXBlIGJhZGdlCiAgICAgICAgY29uc3QgdHlwZUJhZGdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgIHR5cGVCYWRnZS50ZXh0Q29udGVudCA9IGl0ZW0udHlwZTsKICAgICAgICB0eXBlQmFkZ2Uuc3R5bGUuY3NzVGV4dCA9IGAKICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTsKICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tbGlnaHRlcik7CiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5KTsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4OwogICAgICAgICAgICBmb250LXNpemU6IDAuNzVyZW07CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7CiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7CiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTsKICAgICAgICBgOwogICAgICAgIGNvbnRlbnRDYXJkLmFwcGVuZENoaWxkKHR5cGVCYWRnZSk7CiAgICAgICAgCiAgICAgICAgLy8gQ29udGVudAogICAgICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7CiAgICAgICAgY29udGVudC50ZXh0Q29udGVudCA9IGl0ZW0uY29udGVudDsKICAgICAgICBjb250ZW50LnN0eWxlLmNzc1RleHQgPSBgCiAgICAgICAgICAgIG1hcmdpbjogMC41cmVtIDA7CiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1kYXJrKTsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTsKICAgICAgICBgOwogICAgICAgIGNvbnRlbnRDYXJkLmFwcGVuZENoaWxkKGNvbnRlbnQpOwogICAgICAgIAogICAgICAgIC8vIFRhZ3MKICAgICAgICBpZiAoaXRlbS50YWdzICYmIGl0ZW0udGFncy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGNvbnN0IHRhZ3NDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgdGFnc0NvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gYAogICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgICAgIGdhcDogMC4yNXJlbTsKICAgICAgICAgICAgICAgIGZsZXgtd3JhcDogd3JhcDsKICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDAuNXJlbTsKICAgICAgICAgICAgYDsKICAgICAgICAgICAgCiAgICAgICAgICAgIGl0ZW0udGFncy5mb3JFYWNoKHRhZyA9PiB7CiAgICAgICAgICAgICAgICBjb25zdCB0YWdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgICAgICAgICAgdGFnRWxlbWVudC50ZXh0Q29udGVudCA9IHRhZzsKICAgICAgICAgICAgICAgIHRhZ0VsZW1lbnQuc3R5bGUuY3NzVGV4dCA9IGAKICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLjEyNXJlbSAwLjM3NXJlbTsKICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1hY2NlbnQpOwogICAgICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTsKICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMnB4OwogICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC43NXJlbTsKICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNTAwOwogICAgICAgICAgICAgICAgYDsKICAgICAgICAgICAgICAgIHRhZ3NDb250YWluZXIuYXBwZW5kQ2hpbGQodGFnRWxlbWVudCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAKICAgICAgICAgICAgY29udGVudENhcmQuYXBwZW5kQ2hpbGQodGFnc0NvbnRhaW5lcik7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIEhvdmVyIGVmZmVjdHMKICAgICAgICBjb250ZW50Q2FyZC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4gewogICAgICAgICAgICBjb250ZW50Q2FyZC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWSgtMnB4KSc7CiAgICAgICAgICAgIGNvbnRlbnRDYXJkLnN0eWxlLmJveFNoYWRvdyA9ICcwIDRweCAxNnB4IHJnYmEoMCwgMCwgMCwgMC4xNSknOwogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIGNvbnRlbnRDYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7CiAgICAgICAgICAgIGNvbnRlbnRDYXJkLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKDApJzsKICAgICAgICAgICAgY29udGVudENhcmQuc3R5bGUuYm94U2hhZG93ID0gJzAgMnB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMSknOwogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIHRpbWVsaW5lSXRlbS5hcHBlbmRDaGlsZChjb250ZW50Q2FyZCk7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHRpbWVsaW5lSXRlbTsKICAgIH0KICAgIAogICAgYW5pbWF0ZVRpbWVsaW5lSXRlbXMoKSB7CiAgICAgICAgY29uc3QgdGltZWxpbmVJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50aW1lbGluZS1pdGVtJyk7CiAgICAgICAgCiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHsKICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHsKICAgICAgICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykgewogICAgICAgICAgICAgICAgICAgIGVudHJ5LnRhcmdldC5zdHlsZS5vcGFjaXR5ID0gJzEnOwogICAgICAgICAgICAgICAgICAgIGVudHJ5LnRhcmdldC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWCgwKSc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sIHsKICAgICAgICAgICAgdGhyZXNob2xkOiAwLjEsCiAgICAgICAgICAgIHJvb3RNYXJnaW46ICcwcHggMHB4IC01MHB4IDBweCcKICAgICAgICB9KTsKICAgICAgICAKICAgICAgICB0aW1lbGluZUl0ZW1zLmZvckVhY2goaXRlbSA9PiB7CiAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoaXRlbSk7CiAgICAgICAgfSk7CiAgICB9CiAgICAKICAgIHNldEFuaW1hdGlvbnNFbmFibGVkKGVuYWJsZWQpIHsKICAgICAgICB0aGlzLmFuaW1hdGlvbnNFbmFibGVkID0gZW5hYmxlZDsKICAgIH0KICAgIAogICAgZ2V0RmlsdGVyZWREYXRhKCkgewogICAgICAgIHJldHVybiB0aGlzLmZpbHRlcmVkRGF0YTsKICAgIH0KICAgIAogICAgZ2V0U3RhdGlzdGljcygpIHsKICAgICAgICBjb25zdCB0b3RhbEl0ZW1zID0gdGhpcy5maWx0ZXJlZERhdGEubGVuZ3RoOwogICAgICAgIGNvbnN0IHR5cGVDb3VudHMgPSB7fTsKICAgICAgICBjb25zdCBzb3VyY2VDb3VudHMgPSB7fTsKICAgICAgICBjb25zdCB0YWdDb3VudHMgPSB7fTsKICAgICAgICAKICAgICAgICB0aGlzLmZpbHRlcmVkRGF0YS5mb3JFYWNoKGl0ZW0gPT4gewogICAgICAgICAgICAvLyBUeXBlIGNvdW50cwogICAgICAgICAgICB0eXBlQ291bnRzW2l0ZW0udHlwZV0gPSAodHlwZUNvdW50c1tpdGVtLnR5cGVdIHx8IDApICsgMTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFNvdXJjZSBjb3VudHMKICAgICAgICAgICAgc291cmNlQ291bnRzW2l0ZW0uc291cmNlXSA9IChzb3VyY2VDb3VudHNbaXRlbS5zb3VyY2VdIHx8IDApICsgMTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFRhZyBjb3VudHMKICAgICAgICAgICAgaXRlbS50YWdzLmZvckVhY2godGFnID0+IHsKICAgICAgICAgICAgICAgIHRhZ0NvdW50c1t0YWddID0gKHRhZ0NvdW50c1t0YWddIHx8IDApICsgMTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgdG90YWxJdGVtcywKICAgICAgICAgICAgdHlwZUNvdW50cywKICAgICAgICAgICAgc291cmNlQ291bnRzLAogICAgICAgICAgICB0YWdDb3VudHMKICAgICAgICB9OwogICAgfQp9CgpleHBvcnQgeyBUaW1lbGluZU1hbmFnZXIgfTsg
--boundary-gjssvzyld
Content-Type: application/javascript
Content-Transfer-Encoding: base64
Content-Location: js/search.js


--boundary-gjssvzyld
Content-Type: application/javascript
Content-Transfer-Encoding: base64
Content-Location: js/settings.js

LyoqCiAqIFNldHRpbmdzIE1hbmFnZW1lbnQgZm9yIFBob2VuaXggQ29kZXggV2ViIEFwcGxpY2F0aW9uCiAqIEhhbmRsZXMgdXNlciBwcmVmZXJlbmNlcyBhbmQgYXBwbGljYXRpb24gY29uZmlndXJhdGlvbgogKi8KCmNsYXNzIFNldHRpbmdzTWFuYWdlciB7CiAgICBjb25zdHJ1Y3RvcigpIHsKICAgICAgICB0aGlzLnNldHRpbmdzID0gdGhpcy5sb2FkU2V0dGluZ3MoKTsKICAgICAgICB0aGlzLmRlZmF1bHRTZXR0aW5ncyA9IHsKICAgICAgICAgICAgdGhlbWU6ICdkYXJrJywKICAgICAgICAgICAgYXV0b1NhdmU6IHRydWUsCiAgICAgICAgICAgIHZpc3VhbGl6YXRpb25Nb2RlOiAnM2QnLAogICAgICAgICAgICBmb250U2l6ZTogJ21lZGl1bScsCiAgICAgICAgICAgIHNob3dEZWJ1Z0luZm86IGZhbHNlLAogICAgICAgICAgICBtYXhSZXN1bHRzOiAxMDAsCiAgICAgICAgICAgIGFuaW1hdGlvblNwZWVkOiAxLjAsCiAgICAgICAgICAgIGVuYWJsZVRvb2x0aXBzOiB0cnVlCiAgICAgICAgfTsKICAgIH0KCiAgICAvKioKICAgICAqIExvYWQgc2V0dGluZ3MgZnJvbSBsb2NhbFN0b3JhZ2UKICAgICAqLwogICAgbG9hZFNldHRpbmdzKCkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGNvbnN0IHN0b3JlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwaG9lbml4Q29kZXhTZXR0aW5ncycpOwogICAgICAgICAgICByZXR1cm4gc3RvcmVkID8gSlNPTi5wYXJzZShzdG9yZWQpIDoge307CiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCdFcnJvciBsb2FkaW5nIHNldHRpbmdzOicsIGVycm9yKTsKICAgICAgICAgICAgcmV0dXJuIHt9OwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFNhdmUgc2V0dGluZ3MgdG8gbG9jYWxTdG9yYWdlCiAgICAgKi8KICAgIHNhdmVTZXR0aW5ncygpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGhvZW5peENvZGV4U2V0dGluZ3MnLCBKU09OLnN0cmluZ2lmeSh0aGlzLnNldHRpbmdzKSk7CiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTZXR0aW5nc0NoYW5nZSgpOwogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyBzZXR0aW5nczonLCBlcnJvcik7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogR2V0IGEgc2V0dGluZyB2YWx1ZQogICAgICovCiAgICBnZXQoa2V5KSB7CiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoa2V5KSAKICAgICAgICAgICAgPyB0aGlzLnNldHRpbmdzW2tleV0gCiAgICAgICAgICAgIDogdGhpcy5kZWZhdWx0U2V0dGluZ3Nba2V5XTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBhIHNldHRpbmcgdmFsdWUKICAgICAqLwogICAgc2V0KGtleSwgdmFsdWUpIHsKICAgICAgICB0aGlzLnNldHRpbmdzW2tleV0gPSB2YWx1ZTsKICAgICAgICB0aGlzLnNhdmVTZXR0aW5ncygpOwogICAgfQoKICAgIC8qKgogICAgICogUmVzZXQgYWxsIHNldHRpbmdzIHRvIGRlZmF1bHRzCiAgICAgKi8KICAgIHJlc2V0KCkgewogICAgICAgIHRoaXMuc2V0dGluZ3MgPSB7fTsKICAgICAgICB0aGlzLnNhdmVTZXR0aW5ncygpOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IGFsbCBzZXR0aW5ncyB3aXRoIGRlZmF1bHRzIGFwcGxpZWQKICAgICAqLwogICAgZ2V0QWxsKCkgewogICAgICAgIHJldHVybiB7IC4uLnRoaXMuZGVmYXVsdFNldHRpbmdzLCAuLi50aGlzLnNldHRpbmdzIH07CiAgICB9CgogICAgLyoqCiAgICAgKiBEaXNwYXRjaCBzZXR0aW5ncyBjaGFuZ2UgZXZlbnQKICAgICAqLwogICAgZGlzcGF0Y2hTZXR0aW5nc0NoYW5nZSgpIHsKICAgICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnc2V0dGluZ3NDaGFuZ2VkJywgewogICAgICAgICAgICBkZXRhaWw6IHRoaXMuZ2V0QWxsKCkKICAgICAgICB9KTsKICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgIH0KCiAgICAvKioKICAgICAqIEFwcGx5IHRoZW1lIHRvIGRvY3VtZW50CiAgICAgKi8KICAgIGFwcGx5VGhlbWUoKSB7CiAgICAgICAgY29uc3QgdGhlbWUgPSB0aGlzLmdldCgndGhlbWUnKTsKICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRoZW1lJywgdGhlbWUpOwogICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gZG9jdW1lbnQuYm9keS5jbGFzc05hbWUucmVwbGFjZSgvdGhlbWUtXHcrL2csICcnKTsKICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoYHRoZW1lLSR7dGhlbWV9YCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBJbml0aWFsaXplIHNldHRpbmdzIFVJCiAgICAgKi8KICAgIGluaXRpYWxpemVVSSgpIHsKICAgICAgICB0aGlzLmFwcGx5VGhlbWUoKTsKICAgICAgICAKICAgICAgICAvLyBMaXN0ZW4gZm9yIHNldHRpbmdzIGZvcm0gc3VibWlzc2lvbnMKICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHsKICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3NldHRpbmdzLWZvcm0nKSkgewogICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRm9ybVN1Ym1pdChldmVudC50YXJnZXQpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIC8vIExpc3RlbiBmb3IgdGhlbWUgdG9nZ2xlCiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHsKICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3RoZW1lLXRvZ2dsZScpKSB7CiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVRoZW1lKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIEhhbmRsZSBzZXR0aW5ncyBmb3JtIHN1Ym1pc3Npb24KICAgICAqLwogICAgaGFuZGxlRm9ybVN1Ym1pdChmb3JtKSB7CiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7CiAgICAgICAgCiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZm9ybURhdGEuZW50cmllcygpKSB7CiAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHZhbHVlcyB0byBhcHByb3ByaWF0ZSB0eXBlcwogICAgICAgICAgICBsZXQgcHJvY2Vzc2VkVmFsdWUgPSB2YWx1ZTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ3RydWUnKSBwcm9jZXNzZWRWYWx1ZSA9IHRydWU7CiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlID09PSAnZmFsc2UnKSBwcm9jZXNzZWRWYWx1ZSA9IGZhbHNlOwogICAgICAgICAgICBlbHNlIGlmICghaXNOYU4odmFsdWUpICYmIHZhbHVlICE9PSAnJykgcHJvY2Vzc2VkVmFsdWUgPSBOdW1iZXIodmFsdWUpOwogICAgICAgICAgICAKICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCBwcm9jZXNzZWRWYWx1ZSk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIFNob3cgc3VjY2VzcyBtZXNzYWdlCiAgICAgICAgdGhpcy5zaG93TWVzc2FnZSgnU2V0dGluZ3Mgc2F2ZWQgc3VjY2Vzc2Z1bGx5IScsICdzdWNjZXNzJyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUb2dnbGUgYmV0d2VlbiBsaWdodCBhbmQgZGFyayB0aGVtZQogICAgICovCiAgICB0b2dnbGVUaGVtZSgpIHsKICAgICAgICBjb25zdCBjdXJyZW50VGhlbWUgPSB0aGlzLmdldCgndGhlbWUnKTsKICAgICAgICBjb25zdCBuZXdUaGVtZSA9IGN1cnJlbnRUaGVtZSA9PT0gJ2RhcmsnID8gJ2xpZ2h0JyA6ICdkYXJrJzsKICAgICAgICB0aGlzLnNldCgndGhlbWUnLCBuZXdUaGVtZSk7CiAgICAgICAgdGhpcy5hcHBseVRoZW1lKCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTaG93IGEgbWVzc2FnZSB0byB0aGUgdXNlcgogICAgICovCiAgICBzaG93TWVzc2FnZShtZXNzYWdlLCB0eXBlID0gJ2luZm8nKSB7CiAgICAgICAgY29uc3QgbWVzc2FnZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICBtZXNzYWdlRWxlbWVudC5jbGFzc05hbWUgPSBgbWVzc2FnZSBtZXNzYWdlLSR7dHlwZX1gOwogICAgICAgIG1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gbWVzc2FnZTsKICAgICAgICAKICAgICAgICAvLyBTdHlsZSB0aGUgbWVzc2FnZQogICAgICAgIE9iamVjdC5hc3NpZ24obWVzc2FnZUVsZW1lbnQuc3R5bGUsIHsKICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsCiAgICAgICAgICAgIHRvcDogJzIwcHgnLAogICAgICAgICAgICByaWdodDogJzIwcHgnLAogICAgICAgICAgICBwYWRkaW5nOiAnMTBweCAyMHB4JywKICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4JywKICAgICAgICAgICAgekluZGV4OiAnMTAwMDAnLAogICAgICAgICAgICBvcGFjaXR5OiAnMCcsCiAgICAgICAgICAgIHRyYW5zaXRpb246ICdvcGFjaXR5IDAuM3MgZWFzZScKICAgICAgICB9KTsKICAgICAgICAKICAgICAgICAvLyBBZGQgdHlwZS1zcGVjaWZpYyBzdHlsaW5nCiAgICAgICAgY29uc3Qgc3R5bGVzID0gewogICAgICAgICAgICBzdWNjZXNzOiB7IGJhY2tncm91bmRDb2xvcjogJyMyOGE3NDUnLCBjb2xvcjogJ3doaXRlJyB9LAogICAgICAgICAgICBlcnJvcjogeyBiYWNrZ3JvdW5kQ29sb3I6ICcjZGMzNTQ1JywgY29sb3I6ICd3aGl0ZScgfSwKICAgICAgICAgICAgd2FybmluZzogeyBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZjMTA3JywgY29sb3I6ICdibGFjaycgfSwKICAgICAgICAgICAgaW5mbzogeyBiYWNrZ3JvdW5kQ29sb3I6ICcjMTdhMmI4JywgY29sb3I6ICd3aGl0ZScgfQogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgT2JqZWN0LmFzc2lnbihtZXNzYWdlRWxlbWVudC5zdHlsZSwgc3R5bGVzW3R5cGVdIHx8IHN0eWxlcy5pbmZvKTsKICAgICAgICAKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1lc3NhZ2VFbGVtZW50KTsKICAgICAgICAKICAgICAgICAvLyBBbmltYXRlIGluCiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IG1lc3NhZ2VFbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMSc7IH0sIDEwKTsKICAgICAgICAKICAgICAgICAvLyBSZW1vdmUgYWZ0ZXIgMyBzZWNvbmRzCiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgIG1lc3NhZ2VFbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMCc7CiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VFbGVtZW50LnBhcmVudE5vZGUpIHsKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG1lc3NhZ2VFbGVtZW50KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgMzAwKTsKICAgICAgICB9LCAzMDAwKTsKICAgIH0KfQoKLy8gQ3JlYXRlIGdsb2JhbCBzZXR0aW5ncyBpbnN0YW5jZQp3aW5kb3cuUGhvZW5peFNldHRpbmdzID0gbmV3IFNldHRpbmdzTWFuYWdlcigpOwoKLy8gSW5pdGlhbGl6ZSB3aGVuIERPTSBpcyByZWFkeQppZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7CiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4gewogICAgICAgIHdpbmRvdy5QaG9lbml4U2V0dGluZ3MuaW5pdGlhbGl6ZVVJKCk7CiAgICB9KTsKfSBlbHNlIHsKICAgIHdpbmRvdy5QaG9lbml4U2V0dGluZ3MuaW5pdGlhbGl6ZVVJKCk7Cn0KCi8vIEV4cG9ydCBmb3IgbW9kdWxlIHN5c3RlbXMKaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7CiAgICBtb2R1bGUuZXhwb3J0cyA9IFNldHRpbmdzTWFuYWdlcjsKfQ==
--boundary-gjssvzyld
Content-Type: application/javascript
Content-Transfer-Encoding: base64
Content-Location: js/utils.js


--boundary-gjssvzyld
Content-Type: text/css; charset=utf-8
Content-Transfer-Encoding: base64
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css


--boundary-gjssvzyld
Content-Type: text/css; charset=utf-8
Content-Transfer-Encoding: base64
Content-Location: https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap

H4sIAAAAAAAC/+yWTW+bMBzG7/kU3NJ2pfiFl5Bexpu1bu0p6w67TIiSlI2QCGjTqtp339/YSbcdJjWaEEa+YD0GgfX8HuPHOjOy57ooyyIz86fWOLMm75ebqjWXaZYbLxPDkGpdlM9zY3pVtXk9vdzPN+1zmc+NalOv0/Iwu8uL1X07NyhCh7m7otmWKbyi2aVbPtvU2dx4qMuT+7bdNnPL4o81F6umTdsiu8g2a6uxCv456xH71m0WeZTt6k+0uP6cf3hYfKu+3NQ3T9HWQYvvVyn5eO0tbrOL3Wa5JKfwTVhRezLt5PSUf/ChKrLNXW7WabWCNd++Q7aLTOQQdg4CRzNkwiXggqDQ7sY4QSaJWfdE4NrIDFy/EywhiQkXdjn5ObFeTVTXQPT17QZShM87IxEYaTtMCJ8LX94JuQg7QTB2pV2rOs9/KB64t/uFGfiEGWO/u6CuA3h7RGI8yAP1vHMhAi5EbOjMBiH2H4yRHBOYDESWaEBBHNx7LPK2Std5k6trITnCQoyICRfaeYIx+ImxMAiTGQjiC+Fy4UoR8MekjzhgIEIkTOVbd7+PKeIOI1uKGRfiBZRQOXYaJ/BCnDBf/C2DUDIpwYVK8X3tHIMETCShyC4JYxCRI0TkcRFJAWkmsQg/ifljTIb/1fM/bI75DyMOxQmVcJH4UjDCATABgCAJAo4roCFFDCJC8tfb8SMRHHmwJnGgeQQONO+woTp46oLD8EN+EzXEqSFJAFO5ORy+uxwqUYac656eK8FJznH0L3aEv54gVxIKIsGBEDH68kj0BRe4IUdH1AuxLDgr4r8axv/fXbauaeoYOIaa1mvgBlnT+nRgpDWt1xDpmjY4JLqmqQlO17QjITm6pqlj4BhqWq+BG2RN69OBkda0XkOka9rgkOiapiY4XdOOhOTqmqaOgWOoab0GbpA1rU8HRlrTeg2RrmmDQ6JrmprgdE07EpKna5o6Bo6hpvUauEHWtD4dGGlN6zVEuqYNDomuaWqCG3NN+wUAAP//AwCoMu38QzAAAA==
--boundary-gjssvzyld--
